"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebBasedWalletCommunicator = void 0;
const WebBrowser = __importStar(require("expo-web-browser"));
const encoding_1 = require("./encoding");
const error_1 = require("../../../core/error");
class WebBasedWalletCommunicatorClass {
    constructor() {
        this.responseHandlers = new Map();
        this.postRequestAndWaitForResponse = (request, walletScheme) => {
            return new Promise((resolve, reject) => {
                // 1. generate request URL
                const requestUrl = new URL(walletScheme);
                requestUrl.search = (0, encoding_1.encodeRequestURLParams)(request);
                // 2. save response
                this.responseHandlers.set(request.id, resolve);
                // 3. send request via native module
                WebBrowser.openBrowserAsync(requestUrl.toString(), {
                    presentationStyle: WebBrowser.WebBrowserPresentationStyle.FORM_SHEET,
                })
                    .then((result) => {
                    if (result.type === 'cancel') {
                        // iOS only: user cancelled the request
                        reject(error_1.standardErrors.provider.userRejectedRequest());
                        this.disconnect();
                    }
                })
                    .catch(() => {
                    reject(error_1.standardErrors.provider.userRejectedRequest());
                    this.disconnect();
                });
            });
        };
        this.handleResponse = (responseUrl) => {
            const { searchParams } = new URL(responseUrl);
            const response = (0, encoding_1.decodeResponseURLParams)(searchParams);
            const handler = this.responseHandlers.get(response.requestId);
            if (handler) {
                // dismissBrowser only returns a promise on iOS for when Expo SDK is >= 52
                const dismissResult = WebBrowser.dismissBrowser();
                if (dismissResult && typeof dismissResult.then === 'function') {
                    // If dismissBrowser returns a promise, handle it asynchronously
                    dismissResult.then(() => {
                        handler(response);
                        this.responseHandlers.delete(response.requestId);
                    });
                }
                else {
                    // If dismissBrowser is undefined or doesn't return a promise (Android case), handle synchronously
                    handler(response);
                    this.responseHandlers.delete(response.requestId);
                }
                return true;
            }
            return false;
        };
        this.disconnect = () => {
            WebBrowser.dismissBrowser();
            this.responseHandlers.clear();
        };
    }
}
exports.WebBasedWalletCommunicator = new WebBasedWalletCommunicatorClass();
